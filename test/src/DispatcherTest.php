<?php

namespace Ailixter\Puzzle;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-01-17 at 18:49:17.
 */
class DispatcherTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Dispatcher
     */
    protected $object;
    private $responseFactory;
    private $response;
    private $requestFactory;
    private $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->responseFactory = new Example\ResponseFactory;
        $this->response = $this->responseFactory->createResponse();
        $this->requestFactory = new Example\RequestFactory;
        $this->request = $this->requestFactory->createServerRequest('GET', 'http://example.com');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @todo   Implement assertion in testAdd().
     */
    public function testAdd()
    {
        $disp = new Dispatcher($this->response);
        $disp->add(new Example\Middleware('a', 1));
        $disp->add(new Example\Middleware('b', 2));
        return $disp;
    }

    /**
     * @depends testAdd
     */
    public function testHandle(Dispatcher $disp)
    {
        self::assertEquals($this->response,
            $disp->handle($this->request));
    }

    /**
     */
    public function testProcess()
    {
        $disp = new Dispatcher($this->response);
        $disp->add(new Example\Middleware('a', 1));
        $disp->add((new Example\Middleware('b', 2))
             ->setFactories($this->responseFactory, new Example\StreamFactory));
        $result = json_decode($disp->handle($this->request)->getBody());
        self::assertAttributeEquals(1, 'a', $result);
        self::assertAttributeEquals(2, 'b', $result);
    }

}
